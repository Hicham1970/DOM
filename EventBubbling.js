//Event Bubbling ?:
let boutons = document.querySelectorAll("#book-list .delete");

console.log(boutons);
btn_Array = Array.from(boutons);
console.log(btn_Array);

//Loop & event
btn_Array.forEach((btn) => {
  btn.addEventListener("click", (e) => {
    const li = e.target.parentElement; // on cible le li
    li.parentNode.removeChild(li); // on cible le ul
  });
});

/**Event Bubbling:
 * Lorsqu'on attache un eventListener  Ã  un Ã©lÃ©ment, si on clique sur cet Ã©lÃ©ment, l'Ã©vÃ©nement se dÃ©clenche pour cet Ã©lÃ©ment. Si
 * Quand un Ã©vÃ©nement est dÃ©clenchÃ© sur un Ã©lÃ©ment, il peut  sâ€™tendre jusqu'au parent de cet Ã©lÃ©ment , et ainsi de suite jusqu' au plus lointain parent. Ceci est du au fait que les Ã©vÃ©nement bubbles up : se propagent de lâ€™intÃ©rieur vers lâ€™extÃ©rieur.
 *Pour prÃ©venir Ã§a, on fait un event.stopPropagation() method  qui arrÃªte lâ€™Ã©vÃ©nement au premier niveau .
 
 Il parait que pour Ã©viter cette propagation accidentelle, on doit gÃ©rer les Ã©vÃ©nements de maniÃ¨re plus efficace en Ã©coutant les ancÃªtres plutÃ´t que chaque Ã©lÃ©ment individuel. ğŸŒŸ
 Dans notre cas , la cible est le span qui se trouve dans la <li> qui se trouve dans la <ul>, on va cibler la <ul>.
 *
 */
